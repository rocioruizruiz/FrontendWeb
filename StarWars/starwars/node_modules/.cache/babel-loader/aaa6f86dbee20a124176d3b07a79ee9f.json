{"ast":null,"code":"var _jsxFileName = \"/Users/rocioruizruiz/Documentos/Tercero/Frontend/Clase/StarWars/starwars/src/Components/planets.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport './planets.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet data_aux;\n\nconst Planets = props => {\n  _s();\n\n  const order = props.order;\n  const [data, setData] = useState();\n  useEffect(() => {\n    axios.get('https://swapi.dev/api/planets').then(response => setData(response.data));\n  }, []);\n\n  if (data) {\n    data_aux = [...data.results];\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!data && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 24\n    }, this), data_aux && order === 'API' && data_aux.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Target\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Population: \", item.population]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Period: [rotation-\", item.rotation_period, \", orbital-\", item.orbital_period, \"]\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Climate: \", item.climate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Gravity: \", item.gravity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Terrain: \", item.terrain]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Surface water: \", item.surface_water]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this);\n    }), data_aux && order === 'DESC' && data_aux.sort(function (a, b) {\n      if (a.name < b.name) return 1;\n      if (a.name > b.name) return -1;else {\n        return 0;\n      }\n    }).map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Target\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Population: \", item.population]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Period: [rotation-\", item.rotation_period, \", orbital-\", item.orbital_period, \"]\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Climate: \", item.climate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Gravity: \", item.gravity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Terrain: \", item.terrain]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Surface water: \", item.surface_water]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this);\n    }), data_aux && order === 'ASC' && data_aux.sort(function (a, b) {\n      if (a.name > b.name) return 1;\n      if (a.name < b.name) return -1;else {\n        return 0;\n      }\n    }).map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Target\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Population: \", item.population]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Period: [rotation-\", item.rotation_period, \", orbital-\", item.orbital_period, \"]\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Climate: \", item.climate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Gravity: \", item.gravity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Terrain: \", item.terrain]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Surface water: \", item.surface_water]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Planets, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n\n_c = Planets;\nexport default Planets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Planets\");","map":{"version":3,"sources":["/Users/rocioruizruiz/Documentos/Tercero/Frontend/Clase/StarWars/starwars/src/Components/planets.tsx"],"names":["useState","useEffect","axios","data_aux","Planets","props","order","data","setData","get","then","response","results","map","item","name","population","rotation_period","orbital_period","climate","gravity","terrain","surface_water","sort","a","b"],"mappings":"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","sourcesContent":["import react, {FC, useState, useEffect} from 'react'\nimport './planets.css'\nimport axios from 'axios'\n\n\ninterface IPlanets {\n    results: IPlanet[]\n    count: number\n    next: string | null\n    previous: string | null\n}\n\ninterface IPlanet {\n    films: string[]\n    name: string\n    rotation_period: string\n    orbital_period: string\n    diameter: string\n    climate: string \n    gravity: string\n    terrain: string \n    surface_water: string \n    population: string \n    residents: string[]\n    url: string\n}\n\ninterface IPlanetsProps{\n    order: string | undefined\n}\nlet data_aux:IPlanet[];\n\nconst Planets:FC<IPlanetsProps> = (props:IPlanetsProps) => {\n\n    const order = props.order;\n    const [data, setData] = useState<IPlanets>();\n\n    useEffect( () => {\n        axios.get('https://swapi.dev/api/planets')\n             .then( (response => setData(response.data)))\n    }, []);\n\n\n    if(data) { data_aux = [...data.results]};\n    return(\n        <div>\n            { !data && <p> Loading... </p>}\n            {data_aux && order==='API' && data_aux.map( (item:IPlanet) => {\n                return(\n                    <div className=\"Target\">\n                        <h3>{item.name}</h3>\n                        <h2>Population: {item.population}</h2>\n                        <p>Period: [rotation-{item.rotation_period}, orbital-{item.orbital_period}]</p>\n                        <p>Climate: {item.climate}</p>\n                        <p>Gravity: {item.gravity}</p>\n                        <p>Terrain: {item.terrain}</p>\n                        <p>Surface water: {item.surface_water}</p>\n                    </div>\n                );\n            })}\n\n            {data_aux && order==='DESC' && data_aux.sort(function(a,b) { if (a.name < b.name) return 1; if (a.name > b.name) return -1; else{return 0;}}).map( (item:IPlanet) => {\n                return(\n                    <div className=\"Target\">\n                        <h3>{item.name}</h3>\n                        <h2>Population: {item.population}</h2>\n                        <p>Period: [rotation-{item.rotation_period}, orbital-{item.orbital_period}]</p>\n                        <p>Climate: {item.climate}</p>\n                        <p>Gravity: {item.gravity}</p>\n                        <p>Terrain: {item.terrain}</p>\n                        <p>Surface water: {item.surface_water}</p>\n                    </div>\n                );\n            })}\n\n            {data_aux && order==='ASC' && data_aux.sort(function(a,b) { if (a.name > b.name) return 1; if (a.name < b.name) return -1; else{return 0;}}).map( (item:IPlanet) => {\n                return(\n                    <div className=\"Target\">\n                        <h3>{item.name}</h3>\n                        <h2>Population: {item.population}</h2>\n                        <p>Period: [rotation-{item.rotation_period}, orbital-{item.orbital_period}]</p>\n                        <p>Climate: {item.climate}</p>\n                        <p>Gravity: {item.gravity}</p>\n                        <p>Terrain: {item.terrain}</p>\n                        <p>Surface water: {item.surface_water}</p>\n                    </div>\n                );\n            })}\n        </div>\n        \n    );\n}\n\nexport default Planets;\n\n "]},"metadata":{},"sourceType":"module"}